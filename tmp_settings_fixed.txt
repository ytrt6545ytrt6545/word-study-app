import { useEffect, useMemo, useState } from "react";
import { Alert, Button, Pressable, ScrollView, StyleSheet, Text, View } from "react-native";
import { loadSpeechSettings, listVoices, TtsVoice, loadVoiceSelection, saveVoiceForLang, saveRatePercent, getSpeechOptions, loadZhRate, saveZhRate, loadPitchPercent, savePitchPercent } from "@/utils/tts";
import * as Speech from "expo-speech";
import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { Picker } from '@react-native-picker/picker';
import Slider from '@react-native-community/slider';
import { getSrsLimits, saveSrsLimits, getWordFontSize, saveWordFontSize } from "@/utils/storage";
import { useI18n } from "@/i18n";
import { Locale } from "@/i18n";
import * as Google from 'expo-auth-session/providers/google';
import * as WebBrowser from 'expo-web-browser';
import { makeRedirectUri } from 'expo-auth-session';
import Constants from 'expo-constants';
import { buildBackupPayload, uploadBackupToDrive, downloadLatestBackupFromDrive, applyBackupPayload } from '@/utils/backup';

// Move maybeCompleteAuthSession into effect to avoid edge-case crashes on some devices
// and ensure it only runs after module load.

export default function Settings() {
  const { t, locale, setLocale } = useI18n();
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [busy, setBusy] = useState<boolean>(false);
  const [mounted, setMounted] = useState<boolean>(false);
  const [ratePercent, setRatePercent] = useState<number>(50);
  const [pitchPercent, setPitchPercent] = useState<number>(50);
  const [voices, setVoices] = useState<TtsVoice[]>([]);
  const [voiceEn, setVoiceEn] = useState<string | null>(null);
  const [voiceZh, setVoiceZh] = useState<string | null>(null);
  const [loadingVoices, setLoadingVoices] = useState(true);
  const [dailyNewLimit, setDailyNewLimit] = useState<number>(10);
  const [dailyReviewLimit, setDailyReviewLimit] = useState<number>(100);
  const [wordFontSize, setWordFontSize] = useState<number>(18);
  const [zhRate, setZhRate] = useState<number>(1.0);

  useEffect(() => {
    (async () => {
      try {
        const s = await loadSpeechSettings();
        setRatePercent(s.ratePercent);
        setPitchPercent(await loadPitchPercent());
        const vs = await listVoices();
        setVoices(vs);
        const sel = await loadVoiceSelection();
        setVoiceEn(sel.voiceEn);
        setVoiceZh(sel.voiceZh);
        const limits = await getSrsLimits();
        setDailyNewLimit(limits.dailyNewLimit);
        setDailyReviewLimit(limits.dailyReviewLimit);
        setWordFontSize(await getWordFontSize());
        setZhRate(await loadZhRate());
      } finally {
        setLoadingVoices(false);
      }
    })();
  }, []);

  const enVoices = useMemo(() => voices.filter(v => (v.language || '').toLowerCase().startsWith('en')), [voices]);
  const zhVoices = useMemo(() => voices.filter(v => (v.language || '').toLowerCase().startsWith('zh')), [voices]);
  const currentEnName = useMemo(() => {
    if (!voiceEn) return '蝟餌絞?身';
    const v = enVoices.find(v => v.identifier === voiceEn);
    return (v?.name || v?.identifier || voiceEn);
  }, [voiceEn, enVoices]);
  const currentZhName = useMemo(() => {
    if (!voiceZh) return '蝟餌絞?身';
    const v = zhVoices.find(v => v.identifier === voiceZh);
    return (v?.name || v?.identifier || voiceZh);
  }, [voiceZh, zhVoices]);

  const onCommitRate = async (value: number) => {
    setRatePercent(value);
    await saveRatePercent(value);
  };
  const onCommitPitch = async (value: number) => {
    const v = Math.round(value);
    setPitchPercent(v);
    await savePitchPercent(v);
  };
  const onPickVoice = async (lang: 'en' | 'zh', id: string | null) => {
    if (lang === 'en') setVoiceEn(id); else setVoiceZh(id);
    await saveVoiceForLang(lang, id);
  };
  const onCommitNewLimit = async (value: number) => {
    const v = Math.round(value);
    setDailyNewLimit(v);
    await saveSrsLimits({ dailyNewLimit: v });
  };
  const onCommitReviewLimit = async (value: number) => {
    const v = Math.round(value);
    setDailyReviewLimit(v);
    await saveSrsLimits({ dailyReviewLimit: v });
  };
  const onCommitWordFont = async (value: number) => {
    const n = Math.round(value);
    setWordFontSize(n);
    await saveWordFontSize(n);
  };
  const onSetZhRate = async (m: number) => {
    const next = await saveZhRate(m);
    setZhRate(next);
  };
  const onPreviewVoice = async (lang: 'en' | 'zh') => {
    try { Speech.stop(); } catch {}
    const text = lang === 'en' ? 'take an example' : '?銝畾萇內靘?;
    const langCode = lang === 'en' ? 'en-US' : 'zh-TW';
    const opts = await getSpeechOptions(langCode);
    Speech.speak(text, { language: langCode, voice: opts.voice, rate: opts.rate, pitch: opts.pitch });
  };

  // ---- Google Sign-In (Drive appDataFolder) ----
  useEffect(() => {
    setMounted(true);
    try { WebBrowser.maybeCompleteAuthSession(); } catch {}
  }, []);

  const isExpoGo = Constants.appOwnership === 'expo';
  const redirectUri = makeRedirectUri({ scheme: 'haloword', useProxy: isExpoGo });
  useEffect(() => {
    try {
      console.log('GoogleAuth Debug', {
        isExpoGo,
        redirectUri,
        owner: Constants.expoConfig?.owner,
        slug: Constants.expoConfig?.slug,
      });
    } catch {}
  }, [redirectUri]);

  // Debug-only: show which Client IDs are being used
  const cfgAndroidClientId = (Constants.expoConfig as any)?.extra?.google?.androidClientId as (string | undefined);
  const dbgAndroidClientId = cfgAndroidClientId || process.env.EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID || '1040547063297-kghqjd3jrk7oiai1viu6hnp030pi99vb.apps.googleusercontent.com';
  const dbgWebClientId = process.env.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID;
  const dbgExpoClientId = process.env.EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID || dbgWebClientId;
  const AuthSection = () => {
    const androidClientId = ((Constants.expoConfig as any)?.extra?.google?.androidClientId as (string | undefined))
      || process.env.EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID
      || '1040547063297-kghqjd3jrk7oiai1viu6hnp030pi99vb.apps.googleusercontent.com';
    const webClientId = process.env.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID;
    const expoClientId = process.env.EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID || webClientId;
    const [showDebug, setShowDebug] = useState(false);
    const [request, response, promptAsync] = Google.useAuthRequest({
      androidClientId,
      webClientId,
      expoClientId,
      scopes: ['https://www.googleapis.com/auth/drive.appdata'],
      redirectUri,
          prompt: 'select_account',
    });

    useEffect(() => {
      if (response?.type === 'success') {
        const token = response.authentication?.accessToken ?? null;
        setAccessToken(token);
        if (token) Alert.alert('Google ?餃', '?餃??嚗歇??甈?');
      }
    }, [response]);

    // Show detailed error when Google auth fails (e.g., not a test user)
    useEffect(() => {
      if (response?.type === 'error') {
        const r: any = response;
        const detail = r?.error || r?.params?.error || 'invalid_request';
        const desc = r?.params?.error_description || '';
        Alert.alert('Google ?餃憭望?', `${detail}${desc ? `\n${desc}` : ''}`);
        try { console.log('Google auth error', JSON.stringify(response, null, 2)); } catch {}
      }
    }, [response]);

    const onSignIn = async () => {
      if (!request) { Alert.alert('Google ?餃', '?餃隢?撠撠梁?嚗?蝔??岫'); return; }
      await promptAsync({ useProxy: isExpoGo });
    };

    return (
      <View style={{ flexDirection: 'row', gap: 10, marginBottom: 12, flexWrap: 'wrap' }}>
        <Button title={accessToken ? '撌脩?? : '?餃 Google'} onPress={onSignIn} disabled={!!accessToken || !request || busy} />
        <Button title={busy ? '??銝凌? : '蝡?遢'} onPress={onBackupNow} disabled={busy || !accessToken} />
        <Button title={busy ? '??銝凌? : '???遢'} onPress={onRestoreNow} color="#2e7d32" disabled={busy || !accessToken} />
      </View>
    );
  };

  const onBackupNow = async () => {
    if (!accessToken) { Alert.alert('?遢', '隢??餃 Google'); return; }
    try {
      setBusy(true);
      const payload = await buildBackupPayload();
      await uploadBackupToDrive(accessToken, payload);
      Alert.alert('?遢', '撌脣?隞質 Google ?脩垢嚗pp Data Folder嚗?);
    } catch (e: any) {
      Alert.alert('?遢憭望?', String(e?.message || e));
    } finally { setBusy(false); }
  };

  const onRestoreNow = async () => {
    if (!accessToken) { Alert.alert('??', '隢??餃 Google'); return; }
    try {
      setBusy(true);
      const obj = await downloadLatestBackupFromDrive(accessToken);
      if (!obj) { Alert.alert('??', '?曆??啣?隞賣?'); return; }
      await applyBackupPayload(obj);
      Alert.alert('??摰?', '撌脣??典?隞踝?撱箄降??? App 隞亦Ⅱ靽身摰?甇?);
    } catch (e: any) {
      Alert.alert('??憭望?', String(e?.message || e));
    } finally { setBusy(false); }
  };

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={{ paddingBottom: 40 }}>
        <Text style={styles.title}>{t('settings.title')}</Text>

        {/* Backup & Restore via Google Drive */}
        <Text style={styles.sectionTitle}>Google ?脩垢?遢</Text>
        {mounted ? <AuthSection /> : null}

        <Text style={styles.sectionTitle}>{t('settings.language')}</Text>
        <View style={{ marginBottom: 12 }}>
          <Picker selectedValue={locale} onValueChange={(val) => setLocale(val as Locale)}>
            <Picker.Item label={t('settings.language.zh')} value={'zh-TW'} />
            <Picker.Item label={t('settings.language.en')} value={'en'} />
          </Picker>
        </View>

        <Text style={styles.sectionTitle}>{t('settings.dailyLimit')}</Text>
        <View style={{ marginBottom: 12 }}>
          <Text>{t('settings.newLimit', { n: dailyNewLimit })}</Text>
          <Slider minimumValue={0} maximumValue={100} step={1} value={dailyNewLimit} onValueChange={setDailyNewLimit} onSlidingComplete={onCommitNewLimit} />
          <Text>{t('settings.reviewLimit', { n: dailyReviewLimit })}</Text>
          <Slider minimumValue={0} maximumValue={1000} step={10} value={dailyReviewLimit} onValueChange={setDailyReviewLimit} onSlidingComplete={onCommitReviewLimit} />
        </View>

        <Text style={styles.sectionTitle}>{t('settings.rate')}</Text>
        <View style={{ marginBottom: 4 }}>
          <Slider minimumValue={0} maximumValue={100} step={1} value={ratePercent} onValueChange={setRatePercent} onSlidingComplete={onCommitRate} />
          <Text style={styles.dim}>{t('settings.rate.hint', { n: ratePercent })}</Text>
        </View>

        <Text style={styles.sectionTitle}>{t('settings.zhRate')}</Text>
        <View style={styles.row}>
          {[1, 1.15, 1.25, 1.35].map((m) => (
            <View key={m} style={{ marginRight: 6 }}>
              <Button title={`${zhRate === m ? '??' : ''}${m}X`} onPress={() => onSetZhRate(m)} />
            </View>
          ))}
        </View>

        <Text style={styles.sectionTitle}>{t('settings.pitch')}</Text>
        <View style={{ marginBottom: 8 }}>
          <Slider minimumValue={0} maximumValue={100} step={1} value={pitchPercent} onValueChange={setPitchPercent} onSlidingComplete={onCommitPitch} />
          <Text style={styles.dim}>{t('settings.pitch.hint', { n: pitchPercent })}</Text>
        </View>

        <Text style={styles.sectionTitle}>{t('settings.wordFont')}</Text>
        <View style={{ marginBottom: 8 }}>
          <Text>{t('settings.wordFont.value', { n: wordFontSize })}</Text>
          <Slider minimumValue={12} maximumValue={48} step={1} value={wordFontSize} onValueChange={setWordFontSize} onSlidingComplete={onCommitWordFont} />
        </View>

        <Text style={styles.sectionTitle}>{t('settings.enVoices')}</Text>
        {loadingVoices ? (
          <Text style={styles.dim}>{t('settings.loadingVoices')}</Text>
        ) : (
          <View style={styles.voiceList}>
            <View style={{ flex: 1 }}>
              <Picker selectedValue={voiceEn ?? ''} onValueChange={(val) => onPickVoice('en', val === '' ? null : String(val))}>
                <Picker.Item label={t('settings.systemDefault')} value="" />
                {enVoices.map(v => (
                  <Picker.Item key={v.identifier} label={v.name || v.identifier} value={v.identifier} />
                ))}
              </Picker>
            </View>
            <View style={styles.voiceRow}>
              <Text style={styles.voiceName} numberOfLines={1}>{currentEnName}</Text>
              <Pressable onPress={() => onPreviewVoice('en')} accessibilityLabel={t('settings.previewEn')} style={{ paddingHorizontal: 6 }}>
                <MaterialIcons name="play-circle-outline" size={28} color="#1976d2" />
              </Pressable>
            </View>
          </View>
        )}

        <Text style={styles.sectionTitle}>{t('settings.zhVoices')}</Text>
        {loadingVoices ? (
          <Text style={styles.dim}>{t('settings.loadingVoices')}</Text>
        ) : (
          <View style={styles.voiceList}>
            <View style={{ flex: 1 }}>
              <Picker selectedValue={voiceZh ?? ''} onValueChange={(val) => onPickVoice('zh', val === '' ? null : String(val))}>
                <Picker.Item label={t('settings.systemDefault')} value="" />
                {zhVoices.map(v => (
                  <Picker.Item key={v.identifier} label={v.name || v.identifier} value={v.identifier} />
                ))}
              </Picker>
            </View>
            <View style={styles.voiceRow}>
              <Text style={styles.voiceName} numberOfLines={1}>{currentZhName}</Text>
              <Pressable onPress={() => onPreviewVoice('zh')} accessibilityLabel={t('settings.previewZh')} style={{ paddingHorizontal: 6 }}>
                <MaterialIcons name="play-circle-outline" size={28} color="#1976d2" />
              </Pressable>
            </View>
          </View>
        )}
        <View style={{ marginTop: 8 }}>
          <Text style={styles.dim}>ExpoGo: {String(isExpoGo)}</Text>
          <Text style={styles.dim}>redirectUri: {redirectUri}</Text>
          <Text style={styles.dim}>owner/slug: {String(Constants.expoConfig?.owner)}/{String(Constants.expoConfig?.slug)}</Text>
          <Text style={styles.dim}>webClientId: {String(dbgWebClientId)}</Text>
          <Text style={styles.dim}>expoClientId: {String(dbgExpoClientId)}</Text>
          <Text style={styles.dim}>androidClientId: {String(dbgAndroidClientId)}</Text>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 12 },
  sectionTitle: { fontSize: 16, fontWeight: 'bold', marginTop: 12, marginBottom: 8 },
  row: { flexDirection: 'row', gap: 10 },
  voiceList: { marginBottom: 8 },
  voiceRow: { flexDirection: 'row', alignItems: 'center' },
  voiceName: { maxWidth: 180, flexShrink: 1, marginRight: 6, color: '#333' },
  dim: { color: '#666' },
});



